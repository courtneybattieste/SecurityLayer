"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 


Courtney Battieste | cbb389
CS-UY 3923
Computer Security RePy Assignment

    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"



class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    try:            
        #remove files to ensure they're empty
        if self.Afn in listfiles():
            removefile(self.Afn)
        if self.Bfn in listfiles():
            removefile(self.Bfn)            
    
        #create new empty files
        self.Afile = openfile(self.Afn,True)
        self.Bfile = openfile(self.Bfn,True)

        if create:    
            self.Afile.writeat('SE',0)

        else:
            file = openfile(filename,False)
            data = file.readat(None,0)
            file.close()
            
            self.Afile.writeat(data,0)

    except:
        pass


  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    try:
        self.Bfile.writeat(data,offset)
        
    except:
        pass




  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    try:
        return self.Afile.readat(bytes,offset)
        
    except:
        return ""



  def close(self):
    try:
        #check if valid
        validA = False
        checkA = self.Afile.readat(None, 0)

        validB = False
        checkB = self.Bfile.readat(None, 0)   
        
        if checkA and checkA[0] == 'S' and checkA[-1] == 'E':
            validA = True
        if checkB and checkB[0] == 'S' and checkB[-1] == 'E':
            validB = True

        if validA and validB:
            #remove and create new to ensure proper overwrite
            removefile(self.Afn)
            self.Afile = openfile(self.Afn,True)
            self.Afile.writeat(checkB, 0)
            
        else:
            #remove and create new to ensure proper overwrite
            removefile(self.Bfn)
            self.Bfile = openfile(self.Bfn,True)
            self.Bfile.writeat(checkA, 0)
            
        self.Afile.close()
        self.Bfile.close()
        
    except:
        pass


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
